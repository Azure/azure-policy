{
  "properties": {
    "displayName": "[Preview]: Configure subscriptions to enable service health alert monitoring rule",
    "policyType": "BuiltIn",
    "mode": "All",
    "description": "Assignable at the subscription or management group level, this policy ensures that each subscription has a service health alert rule configured with alert conditions and mapping to action groups as specified in the policy parameters. By default creates a resource group, alert rule and action group configured to send emails to subscription owners for all service health events.",
    "metadata": {
      "version": "1.0.0-preview",
      "category": "Monitoring",
      "preview": true
    },
    "version": "1.0.0-preview",
    "parameters": {
      "effect": {
        "type": "String",
        "metadata": {
          "displayName": "Effect",
          "description": "Deploy, audit, or disable this policy."
        },
        "allowedValues": [
          "DeployIfNotExists",
          "AuditIfNotExists",
          "Disabled"
        ],
        "defaultValue": "DeployIfNotExists"
      },
      "enableAlertRule": {
        "type": "String",
        "metadata": {
          "displayName": "Alert rule enabled",
          "description": "The state of the alert rule(enabled or disabled) created by this policy."
        },
        "allowedValues": [
          "true",
          "false"
        ],
        "defaultValue": "true"
      },
      "alertRuleName": {
        "type": "String",
        "metadata": {
          "displayName": "Alert rule name",
          "description": "The name of the alert rule created by this policy. If this is updated after the policy has created resources it can result in duplicate alerts. Please set \"Alert rule enabled\" parameter to false and remediate before updating this value"
        },
        "defaultValue": "ServiceHealthSubscriptionAlertRule"
      },
      "eventTypes": {
        "type": "Array",
        "metadata": {
          "displayName": "Alert rule event types",
          "description": "The alert rule will check for a service health alert for the following incident types."
        },
        "allowedValues": [
          "Service Issues",
          "Planned Maintenance",
          "Health Advisories",
          "Security Advisories"
        ],
        "defaultValue": [
          "Service Issues",
          "Planned Maintenance",
          "Health Advisories",
          "Security Advisories"
        ]
      },
      "actionGroups": {
        "type": "Array",
        "metadata": {
          "displayName": "Existing action group resource ids",
          "description": "The resource ids of existing action groups in the Management Group/Subscription (depending on policy assignment scope) to be used to send alerts."
        },
        "defaultValue": []
      },
      "createNewActionGroup": {
        "type": "String",
        "metadata": {
          "displayName": "New action group creation",
          "description": "If set to true policy creates a new action group for alerts. If set to false, no new action group is created. This creates an action group in each subscription. Use 'Existing action group resource ids' parameter to use a single action group across subscriptions."
        },
        "allowedValues": [
          "true",
          "false"
        ],
        "defaultValue": "true"
      },
      "newActionGroupName": {
        "type": "String",
        "metadata": {
          "displayName": "New action group name",
          "description": "Action group name used to create new action group. If the name is updated after the action group is created it can result in duplicate action groups. Only one 'New action group' will be assigned to the alert rule. Use 'Existing action group resource ids' parameter to assign multiple action groups."
        },
        "defaultValue": "ag-ServiceHealthAlertActionGroup"
      },
      "actionGroupRoleIds": {
        "type": "Array",
        "metadata": {
          "displayName": "New action group roles to email",
          "description": "Arm built-in roles to notify using the new action group. Updates/Compliance state changes do not trigger based on this parameter. Update alert rule parameters above or action group name to trigger an update"
        },
        "allowedValues": [
          "Contributor",
          "Owner",
          "Reader",
          "Monitoring Reader",
          "Monitoring Contributor"
        ],
        "defaultValue": [
          "Owner"
        ]
      },
      "actionGroupResources": {
        "type": "Object",
        "metadata": {
          "displayName": "New action group resources",
          "description": "Resources to be used by the new action group to send alerts. Resources specified must already exist. Updates/Compliance state changes do not trigger based on this parameter. Update alert rule parameters above or action group name to trigger an update"
        },
        "defaultValue": {
          "actionGroupEmail": [],
          "logicappResourceId": "",
          "logicappCallbackUrl": "",
          "eventHubResourceId": [],
          "webhookServiceUri": [],
          "functionResourceId": "",
          "functionTriggerUrl": ""
        }
      },
      "resourceGroupName": {
        "type": "String",
        "metadata": {
          "displayName": "Resource group name",
          "description": "Resource group name used if neccesary to create the alert rule or action group. If this is updated after resources are created it can result in duplicate alert rules and action groups. Please set \"Alert rule enabled\" parameter to false and remediate before updating this value"
        },
        "defaultValue": "rg-serviceHealthAlert"
      },
      "resourceGroupLocation": {
        "type": "String",
        "metadata": {
          "displayName": "Resource group location",
          "description": "Location used to create the resource group",
          "strongType": "location"
        },
        "defaultValue": "centralus"
      },
      "additionalTags": {
        "type": "Object",
        "metadata": {
          "displayName": "Resource tags",
          "description": "Tags on the resources created by this policy."
        },
        "defaultValue": {
          "_created_by_policy": true
        }
      }
    },
    "policyRule": {
      "if": {
        "field": "type",
        "equals": "Microsoft.Resources/subscriptions"
      },
      "then": {
        "effect": "[parameters('effect')]",
        "details": {
          "roleDefinitionIds": [
            "/providers/Microsoft.Authorization/roleDefinitions/47be4a87-7950-4631-9daf-b664a405f074"
          ],
          "type": "Microsoft.Insights/ActivityLogAlerts",
          "existenceScope": "resourceGroup",
          "resourceGroupName": "[parameters('resourceGroupName')]",
          "deploymentScope": "subscription",
          "existenceCondition": {
            "allOf": [
              {
                "field": "Microsoft.Insights/ActivityLogAlerts/enabled",
                "equals": "[parameters('enableAlertRule')]"
              },
              {
                "count": {
                  "field": "Microsoft.Insights/ActivityLogAlerts/condition.allOf[*]",
                  "where": {
                    "allOf": [
                      {
                        "field": "Microsoft.Insights/ActivityLogAlerts/condition.allOf[*].field",
                        "equals": "category"
                      },
                      {
                        "field": "Microsoft.Insights/ActivityLogAlerts/condition.allOf[*].equals",
                        "equals": "ServiceHealth"
                      }
                    ]
                  }
                },
                "greaterOrEquals": 1
              },
              {
                "count": {
                  "field": "Microsoft.Insights/ActivityLogAlerts/condition.allOf[*].anyOf[*]",
                  "where": {
                    "field": "Microsoft.Insights/ActivityLogAlerts/condition.allOf[*].anyOf[*].field",
                    "equals": "properties.incidentType"
                  }
                },
                "equals": "[if(contains(parameters('eventTypes'), 'Health Advisories'), add(length(parameters('eventTypes')), 2), length(parameters('eventTypes')))]"
              },
              {
                "count": {
                  "field": "Microsoft.Insights/ActivityLogAlerts/condition.allOf[*].anyOf[*]",
                  "where": {
                    "allOf": [
                      {
                        "field": "Microsoft.Insights/ActivityLogAlerts/condition.allOf[*].anyOf[*].field",
                        "equals": "properties.incidentType"
                      },
                      {
                        "anyOf": [
                          {
                            "field": "Microsoft.Insights/ActivityLogAlerts/condition.allOf[*].anyOf[*].equals",
                            "in": "[if(contains(parameters('eventTypes'), 'Service Issues'), createArray('Incident'), createArray())]"
                          },
                          {
                            "field": "Microsoft.Insights/ActivityLogAlerts/condition.allOf[*].anyOf[*].equals",
                            "in": "[if(contains(parameters('eventTypes'), 'Health Advisories'), createArray('Maintenance'), createArray())]"
                          },
                          {
                            "field": "Microsoft.Insights/ActivityLogAlerts/condition.allOf[*].anyOf[*].equals",
                            "in": "[if(contains(parameters('eventTypes'), 'Security Advisories'), createArray('Security'), createArray())]"
                          },
                          {
                            "field": "Microsoft.Insights/ActivityLogAlerts/condition.allOf[*].anyOf[*].equals",
                            "in": "[if(contains(parameters('eventTypes'), 'Health Advisories'), createArray('Informational'), createArray())]"
                          },
                          {
                            "field": "Microsoft.Insights/ActivityLogAlerts/condition.allOf[*].anyOf[*].equals",
                            "in": "[if(contains(parameters('eventTypes'), 'Health Advisories'), createArray('ActionRequired'), createArray())]"
                          },
                          {
                            "field": "Microsoft.Insights/ActivityLogAlerts/condition.allOf[*].anyOf[*].equals",
                            "in": "[if(contains(parameters('eventTypes'), 'Health Advisories'), createArray('Retirement'), createArray())]"
                          }
                        ]
                      }
                    ]
                  }
                },
                "equals": "[if(contains(parameters('eventTypes'), 'Health Advisories'), add(length(parameters('eventTypes')), 2), length(parameters('eventTypes')))]"
              },
              {
                "count": {
                  "field": "Microsoft.Insights/ActivityLogAlerts/actions.actionGroups[*]"
                },
                "equals": "[add(length(parameters('actionGroups')), if(equals(parameters('createNewActionGroup'), 'true'), 1, 0))]"
              },
              {
                "count": {
                  "field": "Microsoft.Insights/ActivityLogAlerts/actions.actionGroups[*]",
                  "where": {
                    "anyOf": [
                      {
                        "field": "Microsoft.Insights/ActivityLogAlerts/actions.actionGroups[*].actionGroupId",
                        "in": "[parameters('actionGroups')]"
                      },
                      {
                        "field": "Microsoft.Insights/ActivityLogAlerts/actions.actionGroups[*].actionGroupId",
                        "equals": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Insights/actionGroups/{2}', subscription().subscriptionId, parameters('resourceGroupName'), parameters('newActionGroupName'))]"
                      }
                    ]
                  }
                },
                "equals": "[add(length(parameters('actionGroups')), if(equals(parameters('createNewActionGroup'), 'true'), 1, 0))]"
              }
            ]
          },
          "deployment": {
            "location": "westUS",
            "properties": {
              "mode": "incremental",
              "template": {
                "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                "contentVersion": "1.0.0.0",
                "parameters": {
                  "resourceGroupName": {
                    "type": "string"
                  },
                  "alertRuleName": {
                    "type": "string"
                  },
                  "additionalTags": {
                    "type": "object"
                  },
                  "resourceGroupLocation": {
                    "type": "string"
                  },
                  "eventTypes": {
                    "type": "Array"
                  },
                  "enableAlertRule": {
                    "type": "string"
                  },
                  "actionGroups": {
                    "type": "Array"
                  },
                  "newActionGroupName": {
                    "type": "String"
                  },
                  "createNewActionGroup": {
                    "type": "String"
                  },
                  "actionGroupRoleIds": {
                    "type": "Array"
                  },
                  "actionGroupResources": {
                    "type": "Object"
                  }
                },
                "variables": {
                  "varDefaultResourceGroupTags": {
                    "SHAPolicy_RG": true
                  },
                  "varDefaultActionGroupTags": {
                    "SHAPolicy_AG": true
                  },
                  "varDefaultAlertTags": {
                    "SHAPolicy_SI": "[if(contains(parameters('eventTypes'), 'Service Issues'), 'true', 'false')]",
                    "SHAPolicy_PM": "[if(contains(parameters('eventTypes'), 'Planned Maintenance'), 'true', 'false')]",
                    "SHAPolicy_HA": "[if(contains(parameters('eventTypes'), 'Health Advisories'), 'true', 'false')]",
                    "SHAPolicy_SA": "[if(contains(parameters('eventTypes'), 'Security Advisories'), 'true', 'false')]"
                  },
                  "varIncidentTypeMapping": {
                    "Service Issues": [
                      "Incident"
                    ],
                    "Planned Maintenance": [
                      "Maintenance"
                    ],
                    "Health Advisories": [
                      "ActionRequired",
                      "Retirement",
                      "Informational"
                    ],
                    "Security Advisories": [
                      "Security"
                    ]
                  },
                  "createAlertRulesForTypes": "[union(if(contains(parameters('eventTypes'), 'Service Issues'), variables('varIncidentTypeMapping')['Service Issues'], createArray()), if(contains(parameters('eventTypes'), 'Planned Maintenance'), variables('varIncidentTypeMapping')['Planned Maintenance'], createArray()), if(contains(parameters('eventTypes'), 'Health Advisories'), variables('varIncidentTypeMapping')['Health Advisories'], createArray()), if(contains(parameters('eventTypes'), 'Security Advisories'), variables('varIncidentTypeMapping')['Security Advisories'], createArray()))]",
                  "varArmRoleGuidMap": {
                    "Owner": "8e3af657-a8ff-443c-a75c-2fe8c4bcb635",
                    "Reader": "acdd72a7-3385-48ef-bd42-f606fba81ae7",
                    "Contributor": "b24988ac-6180-42a0-ab88-20f7382dd24c",
                    "Monitoring Reader": "43d0d8ad-25c7-4714-9337-8ba259a9fe05",
                    "Monitoring Contributor": "749f88d5-cbae-40b8-bcfc-e573ddc772fa"
                  },
                  "copy": [
                    {
                      "name": "varLogicAppReceivers",
                      "count": "[if(or(empty(parameters('actionGroupResources')), empty(parameters('actionGroupResources').logicappResourceId)), 0, 1)]",
                      "mode": "serial",
                      "input": {
                        "name": "[if(or(empty(parameters('actionGroupResources')), empty(parameters('actionGroupResources').logicappResourceId)), 'SHLA', concat('SHLA-', last(split(parameters('actionGroupResources').logicappResourceId, '/'))))]",
                        "resourceId": "[if(or(empty(parameters('actionGroupResources')), empty(parameters('actionGroupResources').logicappResourceId)), null(), trim(parameters('actionGroupResources').logicappResourceId))]",
                        "callbackUrl": "[if(or(empty(parameters('actionGroupResources')), empty(parameters('actionGroupResources').logicappCallbackUrl)), null(), trim(parameters('actionGroupResources').logicappCallbackUrl))]",
                        "useCommonAlertSchema": true
                      }
                    },
                    {
                      "name": "varAzureFunctionReceivers",
                      "count": "[if(or(empty(parameters('actionGroupResources')), empty(parameters('actionGroupResources').functionResourceId)), 0, 1)]",
                      "mode": "serial",
                      "input": {
                        "name": "[if(or(empty(parameters('actionGroupResources')), empty(parameters('actionGroupResources').functionResourceId)), 'SHFunc', concat('SHFunc-', last(split(parameters('actionGroupResources').functionResourceId, '/'))))]",
                        "functionAppResourceId": "[if(or(empty(parameters('actionGroupResources')), empty(parameters('actionGroupResources').functionResourceId)), null(), split(trim(parameters('actionGroupResources').functionResourceId),'/functions/')[0])]",
                        "functionName": "[if(or(empty(parameters('actionGroupResources')), empty(parameters('actionGroupResources').functionResourceId)), null(), if(greaterOrEquals(length(split(trim(parameters('actionGroupResources').functionResourceId), '/')), 11), split(trim(parameters('actionGroupResources').functionResourceId), '/')[10], 'defaultName'))]",
                        "httpTriggerUrl": "[if(or(empty(parameters('actionGroupResources')), empty(parameters('actionGroupResources').functionTriggerUrl)), null(), trim(parameters('actionGroupResources').functionTriggerUrl))]",
                        "useCommonAlertSchema": true
                      }
                    },
                    {
                      "name": "varEmailReceivers",
                      "count": "[if(or(empty(parameters('actionGroupResources')), empty(parameters('actionGroupResources').actionGroupEmail)), 0, length(parameters('actionGroupResources').actionGroupEmail))]",
                      "mode": "serial",
                      "input": {
                        "name": "[concat('SHMail-',parameters('actionGroupResources').actionGroupEmail[copyIndex('varEmailReceivers')])]",
                        "emailAddress": "[trim(parameters('actionGroupResources').actionGroupEmail[copyIndex('varEmailReceivers')])]",
                        "useCommonAlertSchema": true
                      }
                    },
                    {
                      "name": "varArmRoleReceivers",
                      "count": "[length(parameters('actionGroupRoleIds'))]",
                      "mode": "serial",
                      "input": {
                        "name": "[concat('SHARM-', parameters('actionGroupRoleIds')[copyIndex('varArmRoleReceivers')])]",
                        "roleId": "[variables('varArmRoleGuidMap')[parameters('actionGroupRoleIds')[copyIndex('varArmRoleReceivers')]]]",
                        "useCommonAlertSchema": true
                      }
                    },
                    {
                      "name": "varEventHubReceivers",
                      "count": "[if(or(empty(parameters('actionGroupResources')), empty(parameters('actionGroupResources').eventHubResourceId)), 0, length(parameters('actionGroupResources').eventHubResourceId))]",
                      "mode": "serial",
                      "input": {
                        "name": "[if(or(empty(parameters('actionGroupResources')), empty(parameters('actionGroupResources').eventHubResourceId[copyIndex('varEventHubReceivers')])), 'SHLA', concat('SHLA-', last(split(parameters('actionGroupResources').eventHubResourceId[copyIndex('varEventHubReceivers')], '/'))))]",
                        "subscriptionId": "[if(empty(parameters('actionGroupResources').eventHubResourceId), null(), split(trim(parameters('actionGroupResources').eventHubResourceId[copyIndex('varEventHubReceivers')]),'/')[2])]",
                        "eventHubNameSpace": "[if(empty(parameters('actionGroupResources').eventHubResourceId), null(), split(trim(parameters('actionGroupResources').eventHubResourceId[copyIndex('varEventHubReceivers')]),'/')[8])]",
                        "eventHubName": "[if(empty(parameters('actionGroupResources').eventHubResourceId), null(), split(trim(parameters('actionGroupResources').eventHubResourceId[copyIndex('varEventHubReceivers')]),'/')[10])]",
                        "useCommonAlertSchema": true,
                        "tenantId": "[subscription().tenantId]"
                      }
                    },
                    {
                      "name": "varWebhookReceivers",
                      "count": "[if(or(empty(parameters('actionGroupResources')), empty(parameters('actionGroupResources').webhookServiceUri)), 0, length(parameters('actionGroupResources').webhookServiceUri))]",
                      "mode": "serial",
                      "input": {
                        "name": "[concat('SHWh-',parameters('actionGroupResources').webhookServiceUri[copyIndex('varWebhookReceivers')])]",
                        "identifierUri": "null()",
                        "objectId": "null()",
                        "serviceUri": "[trim(parameters('actionGroupResources').webhookServiceUri[copyIndex('varWebhookReceivers')])]",
                        "useCommonAlertSchema": true,
                        "tenantId": "null()",
                        "useAadAuth": "false"
                      }
                    },
                    {
                      "name": "formattedActionGroups",
                      "count": "[length(parameters('actionGroups'))]",
                      "input": {
                        "actionGroupId": "[parameters('actionGroups')[copyIndex('formattedActionGroups')]]"
                      }
                    },
                    {
                      "name": "incidentTypeConditions",
                      "count": "[length(variables('createAlertRulesForTypes'))]",
                      "input": {
                        "field": "properties.incidentType",
                        "equals": "[variables('createAlertRulesForTypes')[copyIndex('incidentTypeConditions')]]"
                      }
                    }
                  ]
                },
                "resources": [
                  {
                    "type": "Microsoft.Resources/resourceGroups",
                    "apiVersion": "2021-04-01",
                    "name": "[parameters('resourceGroupName')]",
                    "location": "[parameters('resourceGroupLocation')]",
                    "tags": "[union(variables('varDefaultResourceGroupTags'),parameters('additionalTags'))]"
                  },
                  {
                    "dependsOn": [
                      "[concat('Microsoft.Resources/resourceGroups/', parameters('resourceGroupName'))]"
                    ],
                    "type": "Microsoft.Resources/deployments",
                    "apiVersion": "2019-10-01",
                    "name": "SH-ActionGroupDeployment",
                    "resourceGroup": "[parameters('resourceGroupName')]",
                    "properties": {
                      "expressionEvaluationOptions": {
                        "scope": "inner"
                      },
                      "mode": "Incremental",
                      "template": {
                        "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                        "contentVersion": "1.0.0.0",
                        "parameters": {
                          "additionalTags": {
                            "type": "object"
                          },
                          "createNewActionGroup": {
                            "type": "String"
                          },
                          "newActionGroupName": {
                            "type": "String"
                          },
                          "emailReceivers": {
                            "type": "array"
                          },
                          "armRoleReceivers": {
                            "type": "array"
                          },
                          "logicAppReceivers": {
                            "type": "array"
                          },
                          "eventHubReceivers": {
                            "type": "array"
                          },
                          "webhookReceivers": {
                            "type": "array"
                          },
                          "azureFunctionReceivers": {
                            "type": "array"
                          },
                          "defaultActionGroupTags": {
                            "type": "object"
                          }
                        },
                        "variables": {},
                        "resources": [
                          {
                            "condition": "[equals(parameters('createNewActionGroup'), 'true')]",
                            "type": "Microsoft.Insights/actionGroups",
                            "apiVersion": "2023-01-01",
                            "name": "[parameters('newActionGroupName')]",
                            "location": "global",
                            "tags": "[union(parameters('additionalTags'),parameters('defaultActionGroupTags'))]",
                            "properties": {
                              "groupShortName": "SHA-AG",
                              "enabled": true,
                              "emailReceivers": "[if(empty(parameters('emailReceivers')), null(), parameters('emailReceivers'))]",
                              "armRoleReceivers": "[if(empty(parameters('armRoleReceivers')), null(), parameters('armRoleReceivers'))]",
                              "logicAppReceivers": "[if(empty(parameters('logicAppReceivers')), null(), parameters('logicAppReceivers'))]",
                              "eventHubReceivers": "[if(empty(parameters('eventHubReceivers')), null(), parameters('eventHubReceivers'))]",
                              "webhookReceivers": "[if(empty(parameters('webhookReceivers')), null(), parameters('webhookReceivers'))]",
                              "azureFunctionReceivers": "[if(empty(parameters('azureFunctionReceivers')), null(), parameters('azureFunctionReceivers'))]"
                            }
                          }
                        ]
                      },
                      "parameters": {
                        "additionalTags": {
                          "value": "[parameters('additionalTags')]"
                        },
                        "createNewActionGroup": {
                          "value": "[parameters('createNewActionGroup')]"
                        },
                        "newActionGroupName": {
                          "value": "[parameters('newActionGroupName')]"
                        },
                        "emailReceivers": {
                          "value": "[variables('varEmailReceivers')]"
                        },
                        "armRoleReceivers": {
                          "value": "[variables('varArmRoleReceivers')]"
                        },
                        "logicAppReceivers": {
                          "value": "[variables('varLogicAppReceivers')]"
                        },
                        "eventHubReceivers": {
                          "value": "[variables('varEventHubReceivers')]"
                        },
                        "webhookReceivers": {
                          "value": "[variables('varWebhookReceivers')]"
                        },
                        "azureFunctionReceivers": {
                          "value": "[variables('varAzureFunctionReceivers')]"
                        },
                        "defaultActionGroupTags": {
                          "value": "[variables('varDefaultActionGroupTags')]"
                        }
                      }
                    }
                  },
                  {
                    "dependsOn": [
                      "SH-ActionGroupDeployment"
                    ],
                    "type": "Microsoft.Resources/deployments",
                    "apiVersion": "2019-10-01",
                    "name": "SH-CombinedAlertRuleDeployment",
                    "resourceGroup": "[parameters('resourceGroupName')]",
                    "properties": {
                      "expressionEvaluationOptions": {
                        "scope": "inner"
                      },
                      "mode": "Incremental",
                      "template": {
                        "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                        "contentVersion": "1.0.0.0",
                        "parameters": {
                          "additionalTags": {
                            "type": "object"
                          },
                          "alertRuleName": {
                            "type": "string"
                          },
                          "enableAlertRule": {
                            "type": "string"
                          },
                          "incidentConditions": {
                            "type": "Array"
                          },
                          "actionGroups": {
                            "type": "Array"
                          },
                          "newActionGroupName": {
                            "type": "String"
                          },
                          "createNewActionGroup": {
                            "type": "String"
                          },
                          "defaultAlertTag": {
                            "type": "object"
                          }
                        },
                        "variables": {},
                        "resources": [
                          {
                            "type": "Microsoft.Insights/activityLogAlerts",
                            "apiVersion": "2020-10-01",
                            "location": "global",
                            "tags": "[union(parameters('additionalTags'),parameters('defaultAlertTag'))]",
                            "name": "[parameters('alertRuleName')]",
                            "properties": {
                              "enabled": "[parameters('enableAlertRule')]",
                              "scopes": [
                                "[subscription().id]"
                              ],
                              "condition": {
                                "allOf": [
                                  {
                                    "field": "category",
                                    "equals": "ServiceHealth"
                                  },
                                  {
                                    "anyOf": "[parameters('incidentConditions')]"
                                  }
                                ]
                              },
                              "actions": {
                                "actionGroups": "[concat(if(empty(parameters('actionGroups')), createArray(), parameters('actionGroups')), if(equals(parameters('createNewActionGroup'), 'false'), createArray(), createArray(createObject('actionGroupId', resourceId('Microsoft.Insights/actionGroups', parameters('newActionGroupName'))))))]"
                              }
                            }
                          }
                        ]
                      },
                      "parameters": {
                        "additionalTags": {
                          "value": "[parameters('additionalTags')]"
                        },
                        "alertRuleName": {
                          "value": "[parameters('alertRuleName')]"
                        },
                        "incidentConditions": {
                          "value": "[variables('incidentTypeConditions')]"
                        },
                        "enableAlertRule": {
                          "value": "[parameters('enableAlertRule')]"
                        },
                        "actionGroups": {
                          "value": "[variables('formattedActionGroups')]"
                        },
                        "newActionGroupName": {
                          "value": "[parameters('newActionGroupName')]"
                        },
                        "createNewActionGroup": {
                          "value": "[parameters('createNewActionGroup')]"
                        },
                        "defaultAlertTag": {
                          "value": "[variables('varDefaultAlertTags')]"
                        }
                      }
                    }
                  }
                ]
              },
              "parameters": {
                "resourceGroupName": {
                  "value": "[parameters('resourceGroupName')]"
                },
                "alertRuleName": {
                  "value": "[parameters('alertRuleName')]"
                },
                "additionalTags": {
                  "value": "[parameters('additionalTags')]"
                },
                "resourceGroupLocation": {
                  "value": "[parameters('resourceGroupLocation')]"
                },
                "eventTypes": {
                  "value": "[parameters('eventTypes')]"
                },
                "enableAlertRule": {
                  "value": "[parameters('enableAlertRule')]"
                },
                "actionGroups": {
                  "value": "[parameters('actionGroups')]"
                },
                "createNewActionGroup": {
                  "value": "[parameters('createNewActionGroup')]"
                },
                "newActionGroupName": {
                  "value": "[parameters('newActionGroupName')]"
                },
                "actionGroupRoleIds": {
                  "value": "[parameters('actionGroupRoleIds')]"
                },
                "actionGroupResources": {
                  "value": "[parameters('actionGroupResources')]"
                }
              }
            }
          }
        }
      }
    },
    "versions": [
      "1.0.0-PREVIEW"
    ]
  },
  "id": "/providers/Microsoft.Authorization/policyDefinitions/98903777-a9f6-47f5-90a9-acaf62ab01a8",
  "name": "98903777-a9f6-47f5-90a9-acaf62ab01a8"
}